

Перегрузка методов (Overload)
	Несколько методов одного класса могут иметь одно и то же имя, отличаясь лишь набором параметров. 
	Перегрузка методов один из способоа полиморфизма в Java (один интерфейс - множество методов).
	Для перезагрузки метода, достаточно лишь объявить его новый вариант, отличающийся от уже существующих. 
	Необходимо соблюсти одно условие: тип и/или число параметров в каждом из перезагружаемых методов должны быт разными (отличия возвращаемых типов недостаточно для перегрузки метода)
	
ПРИМЕР: перегрузка метода "ovl" 4 раза. 	
*****
	class Overload {
    void ovl (){ // версия метода без параметров
        System.out.println("ovl без параметров");
    }
    void ovl (int a){// версия с 1-м параметром
        System.out.println("ovl с одним параметром: int a="+a);
    }
    int ovl (int a, int b){// версия с 2-мя параметрами
        System.out.println("ovl с 2-мя параметрами: int a="+a+" и int b="+b);
        return a+b;
    }
    double ovl (double a, double b){//версия с 2-мя параметрами
        System.out.println("ovl с 2-мя параметрами: double a="+a+" и double b="+b);
        return a+b;
    }
}

public class MethodOverload {
    public static void main(String[] args) {
        Overload obj = new Overload();
        int resInt;
        double resDouble;

        System.out.println("Вызываем методы по очереди");

        obj.ovl();

        System.out.println();
        obj.ovl(5);

        System.out.println();
        resInt = obj.ovl(10,73);
        System.out.println("Результат вызова метода obj.ovl(10,73) ="+resInt);

        System.out.println();
        resDouble = obj.ovl(1.5,3.14);
        System.out.println("Результат вызова метода obj.ovl(1.5,3.14) ="+resDouble);
    }
}
*****

Перегрузка конструкторов (Overload)
	Перегрузка конструкторов позволяет конструировать объекты самыми разными способами.
	
ПРИМЕР:
*****
class  MyClass{
    int x;

    MyClass(){
        System.out.println("Внутри MyClass().");
        x=0;
    }

    MyClass(int i){
        System.out.println("Внутри MyClass(int).");
        x=i;
    }

    MyClass(double d){
        System.out.println("Внутри MyClass(double).");
        x=(int)d;
    }

    MyClass(int i, int j){
        System.out.println("Внутри MyClass(int, int).");
        x=i*j;
    }
}

public class OverloadConstructor {
    public static void main(String[] args) {
        MyClass t1 = new MyClass();
        MyClass t2 = new MyClass(77);
        MyClass t3 = new MyClass(3.14);
        MyClass t4 = new MyClass(5,8);

        System.out.println("t1.x: "+t1.x);
        System.out.println("t2.x: "+t2.x);
        System.out.println("t3.x: "+t3.x);
        System.out.println("t4.x: "+t4.x);
    }
}

*****